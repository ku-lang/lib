use std::mem
use std::strings
use std::unicode::utf8

pub type FileMode enum {
	Read,
	Write,
	Append,
}

pub type File struct {
	name string
	path ^u8
	handle ^FILE
}

let SEEK_END uint = 2

let READ_FLAG ^u8 = c"r"
let WRITE_FLAG ^u8 = c"w"
let APPEND_FLAG ^u8 = c"a"

pub static fun File.open(path ^u8, mode FileMode) Option<^var File> {
	var f ^var File = mem::alloc<File>()
	f.path = path
	f.handle = C::fopen(path, mode.getLegacyFileMode())

	if f.handle == (^FILE)(0) {
		// failed to read
		return Option::None
	}

	return Option::Some(f)
}

pub fun File.readToString() Option<^var strings::String> {
	if !this.isOpen() {
		return Option::None
	}

	if C::fseek(this.handle, 0, SEEK_END) != 0 {
		panic("failed to seek")
	}

	let size = C::ftell(this.handle)
	if size == -1 {
		panic("failed to tell")
	}

	C::rewind(this.handle)
	
	var result ^var strings::String = strings::String::withCapacity(uint(size))
	
	var idx = uint(0)
	for idx < uint(size) {
		var char = []u8{C::fgetc(this.handle)}
		var decodedChar = []rune{0}
		utf8::decode(decodedChar, char)
		result.append(decodedChar[0])
		idx += 1
	}

	return Option::Some(result)
}

pub fun File.isOpen()  bool {
	return this.handle != (^FILE)(0)
}

pub fun File.destroy() {
	if this.isOpen() {
		C::fclose(this.handle)
	}
	mem::free(this)
}

/*
	Note this is just placeholder stuff...
	none of this really means anything and
	most of these are somewhat arbitrarily
	chosen... lol
*/
pub fun FileMode.getLegacyFileMode()  ^u8 {
	match this {
		FileMode::Read => {
			return READ_FLAG
		},
		FileMode::Write => {
			return WRITE_FLAG
		},
		FileMode::Append => {
			return APPEND_FLAG
		},
		_ => {
			return READ_FLAG
		},
	}
	return READ_FLAG
}

// C stuff for
// loading files

type FILE {}

[C] fun fopen(loc ^u8, mode ^u8) ^FILE;
[C] fun fseek(handle ^FILE, offset uint, whence uint) int;
[C] fun ftell(handle ^FILE) int;
[C] fun rewind(handle ^FILE);
[C] fun fread(where ^u8, sz uint, dunno uint, handle ^FILE);
[C] fun fclose(handle ^FILE);
[C] fun getenv(what ^u8) ^u8;
[C] fun fgetc(handle ^FILE) u8;
